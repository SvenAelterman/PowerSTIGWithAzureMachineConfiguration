[CmdletBinding()]
param (
    [Parameter()]
    [string] $ContainerName = 'stig-policy-store',

    [Parameter(Mandatory)]
    [string] $StorageAcctResourceGroupName,

    [Parameter(Mandatory)]
    [string] $StorageAcctName,

    [Parameter()]
    [string] $ManagedIdentityResourceId = ""
)


$MetaData = Get-Content -Path './metadata.jsonc' | ConvertFrom-Json
[string]$Version = $MetaData.version
[string]$Guid = $MetaData.guid


# Get a SAS URL for the package
# TODO: Get storage account name from some config or from Terraform bootstrap output
$Context = Get-AzStorageContainer -Name $ContainerName -Context (Get-AzStorageAccount -ResourceGroupName $StorageAcctResourceGroupName -Name $StorageAcctName).Context
$StartTime = Get-Date
$EndTime = $StartTime.AddYears(3)

$TokenParams = @{
    StartTime  = $StartTime
    ExpiryTime = $EndTime
    Container  = $ContainerName
    Blob       = "${{PolicyName}}-${Version}.zip" # Must match the name of the package created in New-Package.ps1
    Permission = 'r' # Read permission
    Context    = $Context.Context
    FullUri    = $true
}
[string]$ContentUri = New-AzStorageBlobSASToken @TokenParams

$MetaData = Get-Content -Path './metadata.jsonc' | ConvertFrom-Json

[string]$Version = $MetaData.version
[string]$Guid = $MetaData.guid

$basePolicyConfig = @{
    PolicyId      = $Guid # Must be a GUID. Use the same GUID for a new version of the policy definition.
    DisplayName   = "${{PolicyName}} STIG Configuration"
    Description   = "Audits and applies the ${{PolicyName}} STIG configuration."
    PolicyVersion = $Version

    Platform      = 'Windows'
    Mode          = 'ApplyAndAutoCorrect'

    # Azure resources
    # ContentUri    = "https://${StorageAcctName}.blob.core.windows.net/stig-policy-store/${{PolicyName}}-${Version}.zip"
    ContentUri    = $ContentUri
}

$umiPolicyConfig = if ($ManagedIdentityResourceId -eq "") {
    @{
        Path               = "./policies/arc-enabled-and-azure/deployIfNotExists"
        ExcludeArcMachines = $false # $true for UMI parameter set
    }
} else {
    @{
        Path               = "./policies/azure-only/deployIfNotExists"
        ExcludeArcMachines = $true # $true for UMI parameter set
        LocalContentPath = "./Package/${{PolicyName}}-${Version}.zip"
        ManagedIdentityResourceId = $ManagedIdentityResourceId
    }
}

$PolicyConfig = $basePolicyConfig + $umiPolicyConfig

New-GuestConfigurationPolicy @PolicyConfig

# Deploy the policy to an Azure Management Group